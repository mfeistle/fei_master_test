; 20140711-112657: Test sequence macro for MyLights Technology finder
; file: TEST_MLTF.ttl - version 1.4

max_frames=51
strdim mb_frm max_frames
logfn="TEST_MLTF.log"
ttcfg="TEST_MLTF.ini"


; modbus frames
;   mb_frm[i]="mpause:request frame;respond frame;error code"

mb_frm[1]="0;$04 $03 $11 $00 $00 $08 $41 $65;04 03 10 4C 4D 5F 54 49 46 44 4E 52 45 30 2D 2E 30 32 30 4D 92;2"
mb_frm[2]="0;$04 $03 $11 $08 $00 $08 $C0 $A7;04 03 10 30 2E 30 30 2D 30 33 63 33 30 32 38 37 63 72 2D F0 31;2"
mb_frm[3]="0;$04 $03 $11 $10 $00 $08 $40 $A0;04 03 10 6C 65 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A0 93;2"
mb_frm[4]="0;$C8 $03 $11 $00 $00 $08 $50 $A9;C8 03 10 4C 4D 5F 54 49 46 44 4E 52 45 4D 5F 53 41 30 2D D9 EA;3"
mb_frm[5]="0;$C8 $03 $11 $08 $00 $08 $D1 $6B;C8 03 10 2E 30 31 30 30 2E 30 30 2D 30 65 38 35 35 36 38 02 E8;3"
mb_frm[6]="0;$C8 $03 $11 $10 $00 $08 $51 $6C;C8 03 10 62 35 72 2D 6C 65 00 00 00 00 00 00 00 00 00 00 3A 89;3"
mb_frm[7]="1000;$04 $10 $20 $00 $00 $01 $02 $00 $02 $39 $03;;4"
mb_frm[8]="0;$04 $03 $10 $22 $00 $03 $A1 $54;04 03 06 FF C4 FF BA 0F A0 EF 82;5"
mb_frm[9]="0;$04 $10 $10 $22 $00 $03 $06 $00 $7F $00 $7F $01 $F4 $3A $E0;04 10 10 22 00 03 24 97;6"
mb_frm[10]="0;$C8 $10 $10 $03 $00 $01 $02 $01 $2E $0C $7B;C8 10 10 03 00 01 E4 90;7"
mb_frm[11]="0;$C8 $10 $10 $00 $00 $01 $02 $00 $49 $4C $32;C8 10 10 00 00 01 14 90;8"
mb_frm[12]="4000;$04 $10 $10 $00 $00 $01 $02 $00 $49 $49 $37;04 10 10 00 00 01 05 5C;9"
mb_frm[13]="0;$04 $03 $10 $03 $00 $01 $70 $9F;04 03 02 01 2E F5 C8;10"
mb_frm[14]="1000;$C8 $10 $10 $03 $00 $01 $02 $01 $55 $4C $58;C8 10 10 03 00 01 E4 90;11"
mb_frm[15]="0;$04 $03 $10 $03 $00 $01 $70 $9F;04 03 02 01 55 B5 EB;12"
mb_frm[16]="1000;$04 $10 $20 $00 $00 $01 $02 $00 $02 $39 $03;;13"
mb_frm[17]="0;$04 $03 $10 $22 $00 $03 $A1 $54;04 03 06 FF C4 FF BA 0F A0 EF 82;14"
mb_frm[18]="1000;$C8 $10 $10 $00 $00 $01 $02 $00 $00 $8D $C4;C8 10 10 00 00 01 14 90;15"
mb_frm[19]="0;$04 $03 $10 $01 $00 $01 $D1 $5F;04 03 02 00 00 74 44;16"


; connect to modbus
call MB_CONNECT

; commit test steps
for test_state 1 max_frames-1
  strlen mb_frm[test_state]
  if result=0 break

  mb_txrx=mb_frm[test_state]
  call SEND_MBFRM

  ; validate respond data register value
  if rd_data>=0 && (rd_data<rd_data_min || rd_data>rd_data_max) then
    setexitcode=mb_frm_err
    end
  endif

next

; disconnect from ModBus
call MB_DISCONNECT

; test done -> ok = 0
logclose
setexitcode 0
end

; ; close log file
; stmp=''
; testlink
; if result=2 loginfo stmp
; strlen stmp
; if result>0 logclose


;-------------------------------------------------------------------------
:MB_CONNECT
;-------------------------------------------------------------------------

  strtrim param2 ' COMcom'
  strlen param2
  if result=0 then
    ; missing argument
    setexitcode 254
    end
  endif

  ; connect to modbus (use teraterm.ini settings)

  sprintf '/F="%s" /C=%s /BAUD=115000' ttcfg param2
  sprintf '/V %s' inputstr  ; hide teraterm
  connect inputstr
  if result<2 then
   ; connection failed
   setexitcode 254
   end
  endif

  ; open modbus log file

  clearscreen 1
  setdebug 2
  logopen logfn 0 0 0 0 1
  if result!=0 then
   setexitcode 253
   end
  endif

return


;-------------------------------------------------------------------------
:MB_DISCONNECT
;-------------------------------------------------------------------------

  disconnect

return


;-------------------------------------------------------------------------
:SEND_MBFRM
;-------------------------------------------------------------------------
; return: (int)rd_data      = single register value in respond (0..64k)
;         (int)rd_data_min  = minimal value
;         (int)rd_data_max  = maximal value
;         (int)mb_frm_err   = exit code
;

  ifdefined frm_cnt
  if result=0 frm_cnt=0

  rd_data=-1        ; default

  setdebug 2        ; teraterm screen data as 2 digit hex
  setecho 0         ; local echo off
  clearscreen 1

  strsplit mb_txrx ';' 6              ; 'pause;request;response;errcode;minval;maxval'
  str2int wait_after groupmatchstr1
  mb_req=groupmatchstr2
  mb_resp=groupmatchstr3
  str2int mb_frm_err groupmatchstr4
  str2int rd_data_min groupmatchstr5
  str2int rd_data_max groupmatchstr6

  mb_resp_valid=1
  strtrim mb_resp ' '
  strlen mb_resp
  if result=0 mb_resp_valid=0         ; ignore respond ('pause;request;;errcode;X;X')

  frm_cnt=frm_cnt+1

  logwrite #$0D#$0A  ; CR+LF
  inputstr=mb_req
  do
    strreplace inputstr 1 '\$' ''
  loop until result=0
  sprintf 'mb_rm[%02d] exitcode=%02d: TX=%s , RX=' frm_cnt mb_frm_err inputstr
  logwrite inputstr

  timeout=0
  mtimeout=100      ; msec
  flushrecv         ; clear receive buffer

  groupmatchstr1=''    ; data read only
  sprintf 'send %s' mb_req
  execcmnd inputstr  ; send frame
  if mb_resp_valid=1 waitregex mb_resp  ; validate response frame
  if mb_resp_valid=1 && result=0 then
    ; timeout or response not valid
    sprintf ' <> %s (error)' mb_resp
    logwrite inputstr
    logclose
    setexitcode mb_frm_err
    end
  endif
  logwrite ' (ok)'

  ; return single register value if defined in respond (regex group 1)
  strtrim groupmatchstr1 ' '
  if result>0 then
    sprintf2 groupmatchstr1 '$%s' groupmatchstr1
    strreplace groupmatchstr1 1 ' ' ''
    str2int rd_data groupmatchstr1
  endif

  ; wait after modbus command
  if wait_after=0 then
    return
  elseif wait_after>999 then
    pause  wait_after/1000  ; sec
    mpause wait_after%1000  ; msec
  else
    mpause wait_after
  endif

return
